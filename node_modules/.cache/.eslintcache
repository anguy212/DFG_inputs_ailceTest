[{"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/index.js":"1","/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/App.js":"2","/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/reportWebVitals.js":"3","/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/testComponents/BasicInput.js":"4","/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/testComponents/DropDownInput.js":"5"},{"size":500,"mtime":1648795040416,"results":"6","hashOfConfig":"7"},{"size":2529,"mtime":1652079227202,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1648795040418,"results":"9","hashOfConfig":"7"},{"size":2456,"mtime":1651994852756,"results":"10","hashOfConfig":"7"},{"size":2895,"mtime":1652079257889,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"owqwgz",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/index.js",[],[],"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/App.js",["30"],[],"import { BasicInput } from \"./testComponents/BasicInput\";\nimport { DropDownInput, Test } from \"./testComponents/DropDownInput\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nconst TestFormDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 50px;\n  background-color: pink;\n`\n\nfunction App() {\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    birthday: \"\",\n    password: \"\",\n  });\n\n  const [dropDownValues, setDropDownValues] = useState({\n    color: \"\",\n    shape: \"\",\n  })\n\n  const inputs = [\n    {\n      id: 1,\n      name: \"username\",\n      Type: \"text\",\n      PlaceHolder: \"Username\",\n      ErrorMessage:\n        \"Username should be 3-16 characters and shouldn't include any special character!\",\n      LabelText: \"Username\",\n      Pattern: \"^[A-Za-z0-9]{3,16}$\",\n      Required: true,\n    },\n    {\n      id: 2,\n      name: \"email\",\n      Type: \"email\",\n      PlaceHolder: \"Email\",\n      ErrorMessage: \"It should be a valid email address!\",\n      LabelText: \"Email\",\n      Pattern: \"^[A-Za-z0-9]*@[A-Za-z0-9]*.com\",\n      required: true,\n    },\n    {\n      id: 3,\n      name: \"birthday\",\n      Type: \"date\",\n      PlaceHolder: \"Birthday\",\n      LabelText: \"Birthday\",\n    },\n    {\n      id: 4,\n      name: \"password\",\n      Type: \"password\",\n      PlaceHolder: \"Password\",\n      ErrorMessage: \"Password needs one special character\",\n      LabelText: \"Password\",\n      required: true,\n    },\n  ];\n\n  const inputs2 = [\n    {\n      name: \"color\",\n      LabelText: \"Color\",\n      Options: [\"Red\", \"Blue\", \"Green\"],\n      PlaceHolder: \"Pick a Color\"\n    },\n    {\n      name: \"shape\",\n      Label: \"Shape\",\n      Options: [\"Circle\", \"Square\", \"Triangle\"],\n      PlaceHolder: \"Pick a Shape\"\n    }\n  ]\n\n  const onDropChange = (n, value) => {\n    setDropDownValues({...dropDownValues, [n]: value});\n  }\n\n  const onChange = (e) => {\n    //console.log(e.target)\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  //console.log(values)\n  //console.log(dropDownValues)\n  return (\n    <TestFormDiv>\n      {inputs.map((input, key) => (\n        //{console.log(input)}\n        <BasicInput key ={key} {...input} OnChange = {onChange} value = {values[input.name]}/>\n        //<Test key={key} {...input}></Test>\n      ))}\n      {inputs2.map((input, key) => (\n        <DropDownInput key = {key} {...input} OnChange = {onDropChange} value = {dropDownValues[input.name]}/>\n      ))}\n    </TestFormDiv>\n  );\n}\n\nexport default App;\n",["31","32"],"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/reportWebVitals.js",[],[],"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/testComponents/BasicInput.js",["33"],[],"/Users/alicenguyen/Documents/DFG_inputs_ailceTest/src/testComponents/DropDownInput.js",["34"],[],"import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\n\nconst Label = styled.label`\n  height: 21px;\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  color: #6F6F6F;\n  margin-bottom: 3px;\n`\nconst DropDownContainer = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  margin: 0px 0px 32px 0px; \n`;\n\nconst DropDownHeader = styled(\"div\")`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 52px;\n  box-sizing: border-box;\n  border-radius: 4px;\n  font-size: 18px;\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 400;\n  padding: 15px 19px 16px 16px;\n  background-color: white;\n  border: ${props => props.isOpen === true ? '2px': '1px'} \n  solid ${props => props.isOpen === true ? '#0067C5': '#111111'};\n`;\n\nconst DropDownListContainer = styled(\"div\")`\n  z-index: 1;\n  height: 52px;\n  margin-top: 0px;\n  width: 100%;  \n  border-radius: 4px 4px 0px 0px;\n  `;\n  //margin-top: 58px;\n\nconst DropDownList = styled(\"ul\")`\n  background: #ffffff;\n  border: 2px solid #e5e5e5;\n  box-sizing: border-box;\n\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 23px;\n\n  margin-block-start: 0;\n  padding-inline-start: 0px;\n`;\n\nconst ListItem = styled(\"li\")`\n  list-style: none;\n  padding: 0.8em 0 0.8em 2em;\n  \n  &:hover{\n    background: linear-gradient(0deg, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0.06)), #FFFFFF;\n  }\n`;\n\nconst SelectText = styled.div`\n  color: ${props => props.selected === true ? 'black': 'grey'}\n`\n\nexport const DropDownInput = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [selected, setSelected] = useState(false);\n\n  const toggling = () => setIsOpen(!isOpen);\n\n  const onOptionClicked = value => () => {\n    props.OnChange(props.name, value);\n    setSelectedOption(value)\n    setIsOpen(false);\n    if(value != \"\"){\n      setSelected(true);\n    }\n  };\n\n  return (\n    <DropDownContainer>\n        <Label>{props.LabelText}</Label>\n        <DropDownHeader onClick={toggling} isOpen = {isOpen}>\n          <SelectText selected = {selected}>\n            {selectedOption || props.PlaceHolder}\n          </SelectText>\n          <FontAwesomeIcon icon={faAngleDown} />\n        </DropDownHeader>\n        {isOpen && (\n          <DropDownListContainer>\n            <DropDownList>\n              {props.Options.map(option => (\n                <ListItem onClick={onOptionClicked(option)} key={Math.random()}>\n                  {option}\n                </ListItem>\n              ))}\n            </DropDownList>\n          </DropDownListContainer>\n        )}\n    </DropDownContainer>\n  );\n}",{"ruleId":"35","severity":1,"message":"36","line":2,"column":25,"nodeType":"37","messageId":"38","endLine":2,"endColumn":29},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":70,"column":34,"nodeType":"45","messageId":"46","endLine":70,"endColumn":36},{"ruleId":"43","severity":1,"message":"47","line":87,"column":14,"nodeType":"45","messageId":"46","endLine":87,"endColumn":16},"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]