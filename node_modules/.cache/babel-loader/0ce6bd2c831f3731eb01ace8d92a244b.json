{"ast":null,"code":"var _jsxFileName = \"/Users/alicenguyen/Documents/sampleCode/dfgsamples/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { BasicInput } from \"./testComponents/BasicInput\";\nimport { DropDownInput, Test } from \"./testComponents/DropDownInput\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestFormDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 50px;\n  background-color: pink;\n`;\n_c = TestFormDiv;\n\nfunction App() {\n  _s();\n\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    birthday: \"\",\n    password: \"\"\n  });\n  const [dropDownValues, setDropDownValues] = useState({\n    color: \"\",\n    shape: \"\"\n  });\n\n  const onDropChange = e => {\n    setDropDownValues({ ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onChange = e => {\n    setValues({ ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const inputs = [{\n    name: \"username\",\n    Type: \"text\",\n    PlaceHolder: \"Username\",\n    ErrorMessage: \"Username should be 3-16 characters and shouldn't include any special character!\",\n    LabelText: \"Username\",\n    Pattern: \"^[A-Za-z0-9]{3,16}$\",\n    Required: true\n  }, {\n    name: \"email\",\n    Type: \"email\",\n    PlaceHolder: \"Email\",\n    ErrorMessage: \"It should be a valid email address!\",\n    LabelText: \"Email\",\n    Pattern: \"^[A-Za-z0-9]*@[A-Za-z0-9]*.com\",\n    required: true\n  }, {\n    name: \"birthday\",\n    Type: \"date\",\n    PlaceHolder: \"Birthday\",\n    LabelText: \"Birthday\"\n  }, {\n    name: \"password\",\n    Type: \"password\",\n    PlaceHolder: \"Password\",\n    ErrorMessage: \"Password needs one special character\",\n    LabelText: \"Password\",\n    required: true\n  }];\n  const inputs2 = [{\n    name: \"color\",\n    Label: \"Color\",\n    Options: [\"Red\", \"Blue\", \"Green\"]\n  }, {\n    name: \"shape\",\n    Label: \"Shape\",\n    Options: [\"Circle\", \"Square\", \"Triangle\"]\n  }];\n  console.log(values);\n  return /*#__PURE__*/_jsxDEV(TestFormDiv, {\n    children: [inputs.map((input, key) =>\n    /*#__PURE__*/\n    //{console.log(input)}\n    _jsxDEV(BasicInput, { ...input,\n      OnChange: onChange,\n      value: values[input.name]\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) //<Test key={key} {...input}></Test>\n    ), inputs2.map((input, key) => /*#__PURE__*/_jsxDEV(DropDownInput, { ...input,\n      OnChange: onDropChange,\n      value: dropDownValues[input.name]\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6YVtYZXkankTMwEyExFueQIZbdk=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TestFormDiv\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/alicenguyen/Documents/sampleCode/dfgsamples/src/App.js"],"names":["BasicInput","DropDownInput","Test","styled","useState","TestFormDiv","div","App","values","setValues","username","email","birthday","password","dropDownValues","setDropDownValues","color","shape","onDropChange","e","target","name","value","onChange","inputs","Type","PlaceHolder","ErrorMessage","LabelText","Pattern","Required","required","inputs2","Label","Options","console","log","map","input","key"],"mappings":"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","sourcesContent":["import { BasicInput } from \"./testComponents/BasicInput\";\nimport { DropDownInput, Test } from \"./testComponents/DropDownInput\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nconst TestFormDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 50px;\n  background-color: pink;\n`\n\nfunction App() {\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    birthday: \"\",\n    password: \"\",\n  });\n\n  const [dropDownValues, setDropDownValues] = useState({\n    color: \"\",\n    shape: \"\",\n  })\n\n  const onDropChange = (e) => {\n    setDropDownValues({...values, [e.target.name]: e.target.value});\n  }\n\n  const onChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const inputs = [\n    {\n      name: \"username\",\n      Type: \"text\",\n      PlaceHolder: \"Username\",\n      ErrorMessage:\n        \"Username should be 3-16 characters and shouldn't include any special character!\",\n      LabelText: \"Username\",\n      Pattern: \"^[A-Za-z0-9]{3,16}$\",\n      Required: true,\n    },\n    {\n      name: \"email\",\n      Type: \"email\",\n      PlaceHolder: \"Email\",\n      ErrorMessage: \"It should be a valid email address!\",\n      LabelText: \"Email\",\n      Pattern: \"^[A-Za-z0-9]*@[A-Za-z0-9]*.com\",\n      required: true,\n    },\n    {\n      name: \"birthday\",\n      Type: \"date\",\n      PlaceHolder: \"Birthday\",\n      LabelText: \"Birthday\",\n    },\n    {\n      name: \"password\",\n      Type: \"password\",\n      PlaceHolder: \"Password\",\n      ErrorMessage: \"Password needs one special character\",\n      LabelText: \"Password\",\n      required: true,\n    },\n  ];\n\n  const inputs2 = [\n    {\n      name: \"color\",\n      Label: \"Color\",\n      Options: [\"Red\", \"Blue\", \"Green\"]\n    },\n    {\n      name: \"shape\",\n      Label: \"Shape\",\n      Options: [\"Circle\", \"Square\", \"Triangle\"]\n    }\n  ]\n\n  console.log(values)\n  return (\n    <TestFormDiv>\n      {inputs.map((input, key) => (\n        //{console.log(input)}\n        <BasicInput key ={key} {...input} OnChange = {onChange} value = {values[input.name]}/>\n        //<Test key={key} {...input}></Test>\n      ))}\n      {inputs2.map((input, key) => (\n        <DropDownInput key = {key} {...input} OnChange = {onDropChange} value = {dropDownValues[input.name]}/>\n      ))}\n    </TestFormDiv>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}